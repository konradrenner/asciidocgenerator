<?xml version="1.0" encoding="UTF-8"?><?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="de">
<info>
<title>asciidocgenerator</title>
<date>2017-09-22</date>
</info>
<simpara>asciidocgenerator is a webapplication which can convert and publish asciidoc files in html and pdf. This application also provides integratoin for GitLab webhooks.</simpara>
<section xml:id="_building">
<title>Building</title>
<simpara>Just clone this repository, go into the asciidocgenerator-web folder and type "mvn package".
After the build has completed, you will find a *.war file and a *.jar file in the target folder.</simpara>
</section>
<section xml:id="_running">
<title>Running</title>
<simpara>The *.war file should be deployable on every Java EE 7 Web-Profile compliant app server. The asciidoctorj libs must be available in the system classloader of the appserver!</simpara>
<simpara>But we strongly recommend running the "fat jar" (asciidocgenerator-swar.jar), just with "java -jar". This will boot a Wildfly Swarm instance with everything needed. If you start the app the first time, you have to create a realm in the provided Keycloak instance.</simpara>
<section xml:id="_initial_keycloak_setup">
<title>Initial Keycloak setup</title>
<simpara>Before the first start, just open "[URL]:[PORT]/auth" (e.g. localhost:8080/auth) in a browser. First you have to create a Keycloak admin user. After this, create a new realm like described here: <link xlink:href="https://dzone.com/articles/securing-wildfly-swarm-apps-with-keycloak">https://dzone.com/articles/securing-wildfly-swarm-apps-with-keycloak</link></simpara>
<simpara>The Realm name and resource has to be "asciidocgenerator". If you use this convention, the keycloak.json must not be changed. Users which should be able to open the settings of the asciidocgenerator app must have the role "admin".</simpara>
</section>
<section xml:id="_properties">
<title>Properties</title>
<simpara>The following table displays properties which can be set at application start via the -D argument, if the defaults do not fit:</simpara>
<informaltable colsep="1" frame="all" rowsep="1">
<tgroup cols="3">
<colspec colname="col_1" colwidth="33.3333*"/>
<colspec colname="col_2" colwidth="33.3333*"/>
<colspec colname="col_3" colwidth="33.3334*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Default</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>asciidocgenerator.token</simpara></entry>
<entry align="left" valign="top"><simpara>none</simpara></entry>
<entry align="left" valign="top"><simpara>Token for authentication at a GitLab server</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>asciidocgenerator.baseDirectory</simpara></entry>
<entry align="left" valign="top"><simpara>~/.asciidocgenerator/files</simpara></entry>
<entry align="left" valign="top"><simpara>Location of generated files</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
</section>
<section xml:id="_using">
<title>Using</title>
<simpara>The only thing you need to define in your asciidoc files, so that they will be converted and published, is the :navigation: header field. The value after the :navigation: field must be in the following form "groupname/mainnavigation/sidenavigation".</simpara>
<simpara><emphasis role="strong">Example:</emphasis> <emphasis>:navigation:Group/Example/Simple adoc</emphasis></simpara>
<simpara><emphasis role="strong">Example if you want a folder in the sidenavigation:</emphasis> <emphasis>:navigation:Group/Example/Folder/Nav Point</emphasis></simpara>
<simpara>asciidocgenerator also comes with the asciidoctor-diagram plugin, so it is possible to also define diagrams in your asciidoc files (e.g. plantuml) and the app will render it. If you want asciidocgenerator to render also diagrams, graphviz must be installed on the system.</simpara>
<section xml:id="_the_user_interface">
<title>The user interface</title>
<simpara>The user interface consists of the main navigation, the side navigation and the asciidoc content. The left part of the main navigation displays the "group", right from the seperator there is the navigation part and the right part of the main navigation are action buttons (e.g. generate pdf). Every entry, except the action buttons, is configured via the :navigation: header field of the asciidoc-document.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="images/screen.png"/>
</imageobject>
<textobject><phrase>screen.png</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
<section xml:id="_gitlab_integration">
<title>GitLab integration</title>
<simpara>The asciidocgenerator webapp provides integration for GitLab webhooks. You just have to provide the asciidocgenerator.token-Property and configure a webhook for the "Tag Push Hook". The webhook must be configured to send a POST Request to the following URL: <emphasis>http://[URL]:[PORT]/api/v1/generator/gitlabtagpushed</emphasis></simpara>
</section>
<section xml:id="_generating_local_files">
<title>Generating local files</title>
<simpara>It is also possible to generate html and pdf files from adoc files which are stored on the local file system. Just have a look at the <emphasis>"localfolder_generation_template.json"</emphasis> and <emphasis>"webhook_post.sh"</emphasis> files to get an idea how to convert and publish local files.</simpara>
</section>
</section>
</article>